patch-package
--- a/node_modules/react-native-navigation/lib/ios/RNNBottomTabsOptions.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNBottomTabsOptions.h
@@ -11,6 +11,7 @@

 @property (nonatomic, strong) NSNumber* tabColor;
 @property (nonatomic, strong) NSNumber* selectedTabColor;
+@property (nonatomic, strong) NSString* barStyle;
 @property (nonatomic, strong) NSNumber* translucent;
 @property (nonatomic, strong) NSNumber* hideShadow;
 @property (nonatomic, strong) NSNumber* backgroundColor;
--- a/node_modules/react-native-navigation/lib/ios/RNNBottomTabsOptions.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNBottomTabsOptions.m
@@ -39,6 +39,12 @@ - (void)applyOn:(UIViewController *)viewController {
 		viewController.tabBarController.tabBar.barTintColor = nil;
 	}

+    if (self.barStyle) {
+        viewController.tabBarController.tabBar.barStyle = [RCTConvert UIBarStyle:self.barStyle];
+    } else {
+        viewController.tabBarController.tabBar.barStyle = UIBarStyleDefault;
+    }
+
 	if (self.translucent) {
 		viewController.tabBarController.tabBar.translucent = [self.translucent boolValue];
 	} else {
--- a/node_modules/react-native-navigation/lib/ios/RNNBridgeManager.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNBridgeManager.h
@@ -1,5 +1,6 @@
 #import <Foundation/Foundation.h>
 #import <React/RCTBridge.h>
+#import "RNNStore.h"
 #import "RNNBridgeManagerDelegate.h"

 typedef UIViewController * (^RNNExternalViewCreator)(NSDictionary* props, RCTBridge* bridge);
@@ -11,5 +12,6 @@ typedef UIViewController * (^RNNExternalViewCreator)(NSDictionary* props, RCTBri
 - (void)registerExternalComponent:(NSString *)name callback:(RNNExternalViewCreator)callback;

 @property (readonly, nonatomic, strong) RCTBridge *bridge;
+@property (readonly, nonatomic, strong) RNNStore *store;

 @end
--- a/node_modules/react-native-navigation/lib/ios/RNNBridgeManager.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNBridgeManager.m
@@ -12,6 +12,7 @@
 @interface RNNBridgeManager() <RCTBridgeDelegate>

 @property (nonatomic, strong, readwrite) RCTBridge *bridge;
+@property (nonatomic, strong, readwrite) RNNStore *store;

 @end

@@ -74,7 +75,7 @@ - (NSURL *)sourceURLForBridge:(RCTBridge *)bridge {

 	id<RNNRootViewCreator> rootViewCreator = [[RNNReactRootViewCreator alloc] initWithBridge:bridge];
 	RNNControllerFactory *controllerFactory = [[RNNControllerFactory alloc] initWithRootViewCreator:rootViewCreator store:_store eventEmitter:eventEmitter andBridge:bridge];
-	_commandsHandler = [[RNNCommandsHandler alloc] initWithStore:_store controllerFactory:controllerFactory eventEmitter:eventEmitter];
+    _commandsHandler = [[RNNCommandsHandler alloc] initWithStore:_store controllerFactory:controllerFactory eventEmitter:eventEmitter bridge:bridge];
 	RNNBridgeModule *bridgeModule = [[RNNBridgeModule alloc] initWithCommandsHandler:_commandsHandler];

 	return [@[bridgeModule,eventEmitter] arrayByAddingObjectsFromArray:[self extraModulesFromDelegate]];
--- a/node_modules/react-native-navigation/lib/ios/RNNCommandsHandler.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNCommandsHandler.h
@@ -1,12 +1,13 @@
 #import <Foundation/Foundation.h>
 #import <UIKit/UIKit.h>
+#import <React/RCTBridge.h>

 #import "RNNControllerFactory.h"
 #import "RNNStore.h"

 @interface RNNCommandsHandler : NSObject

--(instancetype)initWithStore:(RNNStore*)store controllerFactory:(RNNControllerFactory*)controllerFactory eventEmitter:(RNNEventEmitter*)eventEmitter;
+-(instancetype)initWithStore:(RNNStore*)store controllerFactory:(RNNControllerFactory*)controllerFactory eventEmitter:(RNNEventEmitter*)eventEmitter bridge:(RCTBridge*)bridge;

 -(void)setRoot:(NSDictionary*)layout completion:(RNNTransitionCompletionBlock)completion;

--- a/node_modules/react-native-navigation/lib/ios/RNNCommandsHandler.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNCommandsHandler.m
@@ -8,7 +8,6 @@
 #import "RNNElementFinder.h"
 #import "React/RCTUIManager.h"

-
 static NSString* const setRoot	= @"setRoot";
 static NSString* const setStackRoot	= @"setStackRoot";
 static NSString* const push	= @"push";
@@ -31,11 +30,13 @@ @implementation RNNCommandsHandler {
 	RNNOverlayManager* _overlayManager;
 	RNNNavigationStackManager* _stackManager;
 	RNNEventEmitter* _eventEmitter;
+    RCTBridge* _bridge;
 }

--(instancetype) initWithStore:(RNNStore*)store controllerFactory:(RNNControllerFactory*)controllerFactory eventEmitter:(RNNEventEmitter *)eventEmitter {
+-(instancetype) initWithStore:(RNNStore*)store controllerFactory:(RNNControllerFactory*)controllerFactory eventEmitter:(RNNEventEmitter *)eventEmitter bridge:(RCTBridge*)bridge {
 	self = [super init];
 	_store = store;
+    _bridge = bridge;
 	_controllerFactory = controllerFactory;
 	_eventEmitter = eventEmitter;
 	_modalManager = [[RNNModalManager alloc] initWithStore:_store];
@@ -101,16 +102,13 @@ -(void)push:(NSString*)componentId layout:(NSDictionary*)layout completion:(RNNT
 	RNNRootViewController *newVc = (RNNRootViewController *)[_controllerFactory createLayoutAndSaveToStore:layout];
 	UIViewController *fromVC = [_store findComponentForId:componentId];

-	if (newVc.options.preview.elementId) {
+	if (newVc.options.preview.reactTag) {
 		UIViewController* vc = [_store findComponentForId:componentId];

 		if([vc isKindOfClass:[RNNRootViewController class]]) {
 			RNNRootViewController* rootVc = (RNNRootViewController*)vc;
 			rootVc.previewController = newVc;

-			RNNElementFinder* elementFinder = [[RNNElementFinder alloc] initWithFromVC:vc];
-			RNNElementView* elementView = [elementFinder findElementForId:newVc.options.preview.elementId];
-
 			CGSize size = CGSizeMake(rootVc.view.frame.size.width, rootVc.view.frame.size.height);

 			if (newVc.options.preview.width) {
@@ -125,13 +123,17 @@ -(void)push:(NSString*)componentId layout:(NSDictionary*)layout completion:(RNNT
 				newVc.preferredContentSize = size;
 			}

-			[rootVc registerForPreviewingWithDelegate:(id)rootVc sourceView:elementView];
+            RCTExecuteOnMainQueue(^{
+                UIView *view = [self->_bridge.uiManager viewForReactTag:newVc.options.preview.reactTag];
+                [rootVc registerForPreviewingWithDelegate:(id)rootVc sourceView:view];
+            });
+
 		}
 	} else {
 		[newVc onReactViewReady:^{
 			id animationDelegate = (newVc.options.animations.push.hasCustomAnimation || newVc.isCustomTransitioned) ? newVc : nil;
-			[_stackManager push:newVc onTop:fromVC animated:newVc.options.animations.push.enable animationDelegate:animationDelegate completion:^{
-				[_eventEmitter sendOnNavigationCommandCompletion:push params:@{@"componentId": componentId}];
+			[self->_stackManager push:newVc onTop:fromVC animated:newVc.options.animations.push.enable animationDelegate:animationDelegate completion:^{
+				[self->_eventEmitter sendOnNavigationCommandCompletion:push params:@{@"componentId": componentId}];
 				completion();
 			} rejection:rejection];
 		}];
--- a/node_modules/react-native-navigation/lib/ios/RNNPreviewOptions.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNPreviewOptions.h
@@ -2,10 +2,11 @@

 @interface RNNPreviewOptions : RNNOptions

-@property (nonatomic, strong) NSString* elementId;
+@property (nonatomic, strong) NSNumber* reactTag;
 @property (nonatomic, strong) NSNumber* width;
 @property (nonatomic, strong) NSNumber* height;
 @property (nonatomic, strong) NSNumber* commit;
 @property (nonatomic, strong) NSArray* actions;

+
 @end
--- a/node_modules/react-native-navigation/lib/ios/RNNRootViewController.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNRootViewController.h
@@ -12,6 +12,7 @@
 @class RNNRootViewController;

 typedef void (^RNNReactViewReadyCompletionBlock)(void);
+typedef void(^PreviewCallback)(UIViewController *vc);

 @interface RNNRootViewController : UIViewController	<RNNRootViewProtocol, UIViewControllerPreviewingDelegate, UISearchResultsUpdating, UISearchBarDelegate>

@@ -22,6 +23,7 @@ typedef void (^RNNReactViewReadyCompletionBlock)(void);
 @property (nonatomic) id<RNNRootViewCreator> creator;
 @property (nonatomic, strong) RNNAnimator* animator;
 @property (nonatomic, strong) UIViewController* previewController;
+@property (nonatomic, copy) PreviewCallback previewCallback;


 -(instancetype)initWithName:(NSString*)name
--- a/node_modules/react-native-navigation/lib/ios/RNNRootViewController.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNRootViewController.m
@@ -22,6 +22,8 @@ @interface RNNRootViewController() {

 @implementation RNNRootViewController

+@synthesize previewCallback;
+
 -(instancetype)initWithName:(NSString*)name
 				withOptions:(RNNNavigationOptions*)options
 			withComponentId:(NSString*)componentId
@@ -281,27 +283,21 @@ - (void)orientationDidChange:(NSNotification*)notification {

 - (UIViewController *)previewingContext:(id<UIViewControllerPreviewing>)previewingContext viewControllerForLocation:(CGPoint)location{
 	if (self.previewController) {
-		RNNRootViewController * vc = (RNNRootViewController*) self.previewController;
-		[_eventEmitter sendOnNavigationEvent:@"previewContext" params:@{
+		if ([self.previewController isKindOfClass:[RNNRootViewController class]]) {
+			RNNRootViewController * vc = (RNNRootViewController*) self.previewController;
+			[_eventEmitter sendOnNavigationEvent:@"previewContext" params:@{
 																		@"previewComponentId": vc.componentId,
 																		@"componentId": self.componentId
 																		}];
+		}
 	}
 	return self.previewController;
 }


 - (void)previewingContext:(id<UIViewControllerPreviewing>)previewingContext commitViewController:(UIViewController *)viewControllerToCommit {
-	RNNRootViewController * vc = (RNNRootViewController*) self.previewController;
-	NSDictionary * params = @{
-							  @"previewComponentId": vc.componentId,
-							  @"componentId": self.componentId
-							  };
-	if (vc.options.preview.commit) {
-		[_eventEmitter sendOnNavigationEvent:@"previewCommit" params:params];
-		[self.navigationController pushViewController:vc animated:false];
-	} else {
-		[_eventEmitter sendOnNavigationEvent:@"previewDismissed" params:params];
+	if (self.previewCallback) {
+		self.previewCallback(self);
 	}
 }

--- a/node_modules/react-native-navigation/lib/ios/RNNTopBarOptions.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNTopBarOptions.h
@@ -10,6 +10,7 @@

 @property (nonatomic, strong) NSArray* leftButtons;
 @property (nonatomic, strong) NSArray* rightButtons;
+@property (nonatomic, strong) NSString* barStyle;
 @property (nonatomic, strong) NSNumber* visible;
 @property (nonatomic, strong) NSNumber* hideOnScroll;
 @property (nonatomic, strong) NSNumber* buttonColor;
--- a/node_modules/react-native-navigation/lib/ios/RNNTopBarOptions.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNTopBarOptions.m
@@ -117,6 +117,12 @@ - (void)applyOn:(UIViewController*)viewController {
 		disableTopBarTransparent();
 	}

+    if (self.barStyle) {
+        viewController.navigationController.navigationBar.barStyle = [RCTConvert UIBarStyle:self.barStyle];
+    } else {
+        viewController.navigationController.navigationBar.barStyle = UIBarStyleDefault;
+    }
+
 	if (self.translucent) {
 		viewController.navigationController.navigationBar.translucent = [self.translucent boolValue];
 	} else {
--- a/node_modules/react-native-navigation/lib/ios/ReactNativeNavigation.h
+++ b/node_modules/react-native-navigation/lib/ios/ReactNativeNavigation.h
@@ -15,4 +15,6 @@ typedef UIViewController * (^RNNExternalViewCreator)(NSDictionary* props, RCTBri

 + (RCTBridge *)getBridge;

++ (UIViewController *)findViewController:(NSString *)componentId;
+
 @end
--- a/node_modules/react-native-navigation/lib/ios/ReactNativeNavigation.m
+++ b/node_modules/react-native-navigation/lib/ios/ReactNativeNavigation.m
@@ -32,6 +32,12 @@ + (RCTBridge *)getBridge {
 }


++ (UIViewController *)findViewController:(NSString *)componentId {
+	RNNStore *store = [[ReactNativeNavigation sharedInstance].bridgeManager store];
+	return [store findComponentForId:componentId];
+}
+
+
 # pragma mark - instance

 + (instancetype) sharedInstance {
