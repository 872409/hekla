patch-package
--- a/node_modules/react-native-navigation/lib/ios/RNNBottomTabsOptions.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNBottomTabsOptions.h
@@ -9,12 +9,14 @@
 @property (nonatomic, strong) NSNumber* drawBehind;
 @property (nonatomic, strong) NSString* currentTabId;
 
-@property (nonatomic, strong) NSNumber* tabColor;
-@property (nonatomic, strong) NSNumber* selectedTabColor;
 @property (nonatomic, strong) NSNumber* translucent;
 @property (nonatomic, strong) NSNumber* hideShadow;
 @property (nonatomic, strong) NSNumber* backgroundColor;
+@property (nonatomic, strong) NSNumber* tabColor;
+@property (nonatomic, strong) NSNumber* selectedTabColor;
 @property (nonatomic, strong) NSString* fontFamily;
 @property (nonatomic, strong) NSNumber* fontSize;
 
+@property (nonatomic, strong) NSString* style;
+
 @end
--- a/node_modules/react-native-navigation/lib/ios/RNNBottomTabsOptions.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNBottomTabsOptions.m
@@ -45,6 +45,21 @@ - (void)applyOn:(UIViewController *)viewController {
 		viewController.tabBarController.tabBar.translucent = NO;
 	}
 
+    if (self.style) {
+        if ([self.style isEqualToString:@"default"]) {
+            viewController.tabBarController.tabBar.barStyle = UIBarStyleDefault;
+        }
+        if ([self.style isEqualToString:@"black"]) {
+            viewController.tabBarController.tabBar.barStyle = UIBarStyleBlack;
+        }
+        if ([self.style isEqualToString:@"blackOpaque"]) {
+            viewController.tabBarController.tabBar.barStyle = UIBarStyleBlackOpaque;
+        }
+        if ([self.style isEqualToString:@"blackTranslucent"]) {
+            viewController.tabBarController.tabBar.barStyle = UIBarStyleBlackTranslucent;
+        }
+    }
+
 	if (self.hideShadow) {
 		viewController.tabBarController.tabBar.clipsToBounds = [self.hideShadow boolValue];
 	}
--- a/node_modules/react-native-navigation/lib/ios/RNNBridgeManager.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNBridgeManager.h
@@ -1,6 +1,7 @@
 #import <Foundation/Foundation.h>
 #import <React/RCTBridge.h>
 #import "RNNBridgeManagerDelegate.h"
+#import "RNNStore.h"
 
 typedef UIViewController * (^RNNExternalViewCreator)(NSDictionary* props, RCTBridge* bridge);
 
@@ -11,5 +12,6 @@ typedef UIViewController * (^RNNExternalViewCreator)(NSDictionary* props, RCTBri
 - (void)registerExternalComponent:(NSString *)name callback:(RNNExternalViewCreator)callback;
 
 @property (readonly, nonatomic, strong) RCTBridge *bridge;
+@property (readonly, nonatomic, strong) RNNStore *store;
 
 @end
--- a/node_modules/react-native-navigation/lib/ios/RNNBridgeManager.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNBridgeManager.m
@@ -12,6 +12,7 @@
 @interface RNNBridgeManager() <RCTBridgeDelegate>
 
 @property (nonatomic, strong, readwrite) RCTBridge *bridge;
+@property (nonatomic, strong, readwrite) RNNStore *store;
 
 @end
 
--- a/node_modules/react-native-navigation/lib/ios/RNNCommandsHandler.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNCommandsHandler.m
@@ -107,6 +107,25 @@ -(void)push:(NSString*)componentId layout:(NSDictionary*)layout completion:(RNNT
 		if([vc isKindOfClass:[RNNRootViewController class]]) {
 			RNNRootViewController* rootVc = (RNNRootViewController*)vc;
 			rootVc.previewController = newVc;
+            rootVc.previewCallback = ^(UIViewController *vcc) {
+                RNNRootViewController* rvc  = (RNNRootViewController*)vcc;
+                NSDictionary * params = @{
+                                          @"previewComponentId": newVc.componentId,
+                                          @"componentId": rvc.componentId
+                                          };
+                if (newVc.options.preview.commit) {
+                    [_eventEmitter sendOnNavigationEvent:@"previewCommit" params:params];
+                    [CATransaction begin];
+                    [CATransaction setCompletionBlock:^{
+                        [_eventEmitter sendOnNavigationCommandCompletion:push params:@{@"componentId": componentId}];
+                        completion();
+                    }];
+                    [rvc.navigationController pushViewController:newVc animated:YES];
+                    [CATransaction commit];
+                } else {
+                    [_eventEmitter sendOnNavigationEvent:@"previewDismissed" params:params];
+                }
+            };
 
 			RNNElementFinder* elementFinder = [[RNNElementFinder alloc] initWithFromVC:vc];
 			RNNElementView* elementView = [elementFinder findElementForId:newVc.options.preview.elementId];
--- a/node_modules/react-native-navigation/lib/ios/RNNRootViewController.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNRootViewController.h
@@ -12,6 +12,7 @@
 @class RNNRootViewController;
 
 typedef void (^RNNReactViewReadyCompletionBlock)(void);
+typedef void(^PreviewCallback)(UIViewController *vc);
 
 @interface RNNRootViewController : UIViewController	<RNNRootViewProtocol, UIViewControllerPreviewingDelegate, UISearchResultsUpdating, UISearchBarDelegate>
 
@@ -22,6 +23,7 @@ typedef void (^RNNReactViewReadyCompletionBlock)(void);
 @property (nonatomic) id<RNNRootViewCreator> creator;
 @property (nonatomic, strong) RNNAnimator* animator;
 @property (nonatomic, strong) UIViewController* previewController;
+@property (nonatomic, copy) PreviewCallback previewCallback;
 
 
 -(instancetype)initWithName:(NSString*)name
--- a/node_modules/react-native-navigation/lib/ios/RNNRootViewController.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNRootViewController.m
@@ -22,6 +22,8 @@ @interface RNNRootViewController() {
 
 @implementation RNNRootViewController
 
+@synthesize previewCallback;
+
 -(instancetype)initWithName:(NSString*)name
 				withOptions:(RNNNavigationOptions*)options
 			withComponentId:(NSString*)componentId
@@ -281,28 +283,22 @@ - (void)orientationDidChange:(NSNotification*)notification {
 
 - (UIViewController *)previewingContext:(id<UIViewControllerPreviewing>)previewingContext viewControllerForLocation:(CGPoint)location{
 	if (self.previewController) {
-		RNNRootViewController * vc = (RNNRootViewController*) self.previewController;
-		[_eventEmitter sendOnNavigationEvent:@"previewContext" params:@{
-																		@"previewComponentId": vc.componentId,
-																		@"componentId": self.componentId
-																		}];
+        if ([self.previewController isKindOfClass:[RNNRootViewController class]]) {
+            RNNRootViewController * vc = (RNNRootViewController*) self.previewController;
+            [_eventEmitter sendOnNavigationEvent:@"previewContext" params:@{
+                                                                            @"previewComponentId": vc.componentId,
+                                                                            @"componentId": self.componentId
+                                                                            }];
+        }
 	}
 	return self.previewController;
 }
 
 
 - (void)previewingContext:(id<UIViewControllerPreviewing>)previewingContext commitViewController:(UIViewController *)viewControllerToCommit {
-	RNNRootViewController * vc = (RNNRootViewController*) self.previewController;
-	NSDictionary * params = @{
-							  @"previewComponentId": vc.componentId,
-							  @"componentId": self.componentId
-							  };
-	if (vc.options.preview.commit) {
-		[_eventEmitter sendOnNavigationEvent:@"previewCommit" params:params];
-		[self.navigationController pushViewController:vc animated:false];
-	} else {
-		[_eventEmitter sendOnNavigationEvent:@"previewDismissed" params:params];
-	}
+    if (self.previewCallback) {
+        self.previewCallback(self);
+    }
 }
 
 - (void)onActionPress:(NSString *)id {
--- a/node_modules/react-native-navigation/lib/ios/RNNTopBarOptions.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNTopBarOptions.h
@@ -28,6 +28,7 @@
 @property (nonatomic, strong) NSNumber* searchBar;
 @property (nonatomic, strong) NSNumber* searchBarHiddenWhenScrolling;
 @property (nonatomic, strong) NSString* searchBarPlaceholder;
+@property (nonatomic, strong) NSString* style;
 
 @property (nonatomic, strong) RNNComponentOptions* component;
 
--- a/node_modules/react-native-navigation/lib/ios/RNNTopBarOptions.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNTopBarOptions.m
@@ -123,6 +123,21 @@ - (void)applyOn:(UIViewController*)viewController {
 		viewController.navigationController.navigationBar.translucent = NO;
 	}
 
+    if (self.style) {
+        if ([self.style isEqualToString:@"default"]) {
+            viewController.navigationController.navigationBar.barStyle = UIBarStyleDefault;
+        }
+        if ([self.style isEqualToString:@"black"]) {
+            viewController.navigationController.navigationBar.barStyle = UIBarStyleBlack;
+        }
+        if ([self.style isEqualToString:@"blackOpaque"]) {
+            viewController.navigationController.navigationBar.barStyle = UIBarStyleBlackOpaque;
+        }
+        if ([self.style isEqualToString:@"blackTranslucent"]) {
+            viewController.navigationController.navigationBar.barStyle = UIBarStyleBlackTranslucent;
+        }
+    }
+
 	if (self.drawBehind) {
 		if ([self.drawBehind boolValue]) {
 			viewController.edgesForExtendedLayout |= UIRectEdgeTop;
--- a/node_modules/react-native-navigation/lib/ios/ReactNativeNavigation.h
+++ b/node_modules/react-native-navigation/lib/ios/ReactNativeNavigation.h
@@ -15,4 +15,6 @@ typedef UIViewController * (^RNNExternalViewCreator)(NSDictionary* props, RCTBri
 
 + (RCTBridge *)getBridge;
 
++ (UIViewController *)findViewController:(NSString *)componentId;
+
 @end
--- a/node_modules/react-native-navigation/lib/ios/ReactNativeNavigation.m
+++ b/node_modules/react-native-navigation/lib/ios/ReactNativeNavigation.m
@@ -31,6 +31,10 @@ + (RCTBridge *)getBridge {
 	return [[ReactNativeNavigation sharedInstance].bridgeManager bridge];
 }
 
++ (UIViewController *)findViewController:(NSString *)componentId {
+    RNNStore *store = [[ReactNativeNavigation sharedInstance].bridgeManager store];
+    return [store findComponentForId:componentId];
+}
 
 # pragma mark - instance
 
